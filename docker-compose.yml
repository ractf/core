version: "3.8"

x-gunicorn-master: &x-gunicorn-master
  build: .
  entrypoint:
  privileged: true
  volumes:
    - .:/app
  environment:
    - DOMAIN=localhost
    - FRONTEND_URL=http://localhost:8000/
    - SECRET_KEY=CorrectHorseBatteryStaple
    - DJANGO_SETTINGS_MODULE=backend.settings.local
    - ANDROMEDA_IP=andromeda
    - ANDROMEDA_URL=http://andromeda:6000
    - REDIS_PORT=6379
    - REDIS_HOST=redis
    - REDIS_CONFIG_DB=3
    - REDIS_CACHE_DB=10
    - SQL_PORT=5432
    - SQL_HOST=database
    - SQL_USER=postgres
    - SQL_DATABASE=postgres
    - EMAIL_PROVIDER=CONSOLE
  depends_on:
    database:
      condition: service_healthy
    redis:
      condition: service_started


services:
  redis:
    image: docker.io/redis:5

  database:
    image: docker.io/postgres:12-alpine
    environment:
      - POSTGRES_EXTENSIONS=citext
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 1s
      timeout: 30s
      retries: 30

  shell:
    image: ghcr.io/ractf/shell:latest
    ports:
      - "8000:8000"
    environment:
      - RACTF_API_BASE=/api/v2
      - RACTF_USE_HEAD_NAV=true
      - RACTF_SITE_NAME=RACTF Dev
      - RACTF_API_DOMAIN=http://localhost:8000
      - RACTF_WSS_URL=ws://localhost:8000/api/v2/ws/
    depends_on:
      - backend
      - sockets
    command:
      caddy run --config /etc/caddy/Caddyfile.development --adapter caddyfile

  backend:
    <<: *x-gunicorn-master
    entrypoint: /app/entrypoints/backend.sh
    command: gunicorn backend.wsgi:application
    depends_on:
      - database
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8000/api/v2/healthcheck/?format=json"]
      interval: 10s
      timeout: 50s
      retries: 5

  sockets:
    <<: *x-gunicorn-master
    entrypoint: /app/entrypoints/sockets.sh
    command: gunicorn backend.asgi:application
    depends_on:
      backend:
        condition: service_healthy

  watchtower:
    image: docker.io/containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: --interval 5