name: Run Tests

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: 'backend.settings.test'
      REDIS_PORT: 6379
      REDIS_CONFIG_DB: 1
      REDIS_CACHE_DB: 2
      REDIS_HOST: localhost
      SQL_PORT: 5432
      SQL_USER: ractf
      SQL_HOST: localhost
      SQL_DATABASE: ractf
      SQL_PASSWORD: postgres
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_EXTENSIONS: citext
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: ractf
          POSTGRES_USER: ractf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:5
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache Python modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Poetry
      run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      env:
        POETRY_PREVIEW: 1
    
    - name: Disable Virtualenvs
      run: $HOME/.poetry/bin/poetry config virtualenvs.create false

    - name: Install Python Dependencies
      run: $HOME/.poetry/bin/poetry install --no-interaction --no-ansi
      env:
        PIP_CACHE_DIR: ~/.pip

    - name: Run Migrations
      run: ./manage.py migrate
      working-directory: ./src

    - name: Run Tests
      run: coverage run --source='.' ./manage.py test
      working-directory: ./src
    
    - name: Output Coverage Report
      run: coverage report || true
      working-directory: ./src

    - name: Save Coverage XML
      run: coverage xml || true
      working-directory: ./src

    - name: Upload to CodeCov
      uses: codecov/codecov-action@v1
      with:
        files: ./src/coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Publish Coverage XML
      uses: actions/upload-artifact@v2
      with:
        name: coverage.xml
        path: ./src/coverage.xml
